# Enhanced Flex File Monitor Configuration
# Addresses nri-flex issue #509 - File Staleness Detection

global:
  name: "enhanced-flex-monitor"
  interval: 30s  # How often to check all APIs
  log_level: "info"  # trace, debug, info, warn, error, fatal, panic
  enable_metrics: true
  enable_alerts: true
  worker_count: 4  # Number of concurrent API processors

# New Relic configuration
newrelic:
  api_key: "${NEW_RELIC_API_KEY}"  # Use environment variable
  region: "US"  # US or EU
  account_id: "${NEW_RELIC_ACCOUNT_ID}"
  # URLs are auto-configured based on region, but can be overridden:
  # events_url: "https://insights-collector.newrelic.com/v1/accounts/%s/events"
  # metrics_url: "https://metric-api.newrelic.com/metric/v1"

# Alert configuration
alerts:
  channels:
    - name: "webhook-alerts"
      type: "webhook"
      enabled: true
      settings:
        url: "${WEBHOOK_URL}"
        api_key: "${WEBHOOK_API_KEY}"  # Optional
        
    - name: "slack-alerts"
      type: "slack"
      enabled: false  # Set to true to enable
      settings:
        webhook_url: "${SLACK_WEBHOOK_URL}"
        
    - name: "log-alerts"
      type: "log"
      enabled: true
      settings:
        level: "warn"

# API configurations with file staleness detection
apis:
  # Example 1: JSON API with aggressive staleness detection
  - name: "service-metrics"
    url: "https://api.example.com/metrics.json"
    format: "json"
    jq: ".data[] | select(.status == \"active\")"  # Optional JQ filter
    event_type: "ServiceMetrics"
    enabled: true
    attributes:
      service: "example-api"
      environment: "production"
      team: "platform"
    staleness:
      enabled: true
      threshold: 5m  # Consider stale if older than 5 minutes
      behavior: "skip"  # skip, alert, continue
      check_url: "https://api.example.com/metrics.json"  # Defaults to main URL

  # Example 2: CSV data with moderate staleness detection
  - name: "performance-data"
    url: "https://data.example.com/performance.csv"
    format: "csv"
    event_type: "PerformanceData"
    enabled: true
    attributes:
      source: "performance-monitoring"
      format: "csv"
    staleness:
      enabled: true
      threshold: 15m
      behavior: "alert"  # Generate alert but continue processing

  # Example 3: Legacy API with lenient staleness detection
  - name: "legacy-system"
    url: "https://legacy.example.com/data.json"
    format: "json"
    event_type: "LegacyData"
    enabled: true
    attributes:
      system: "legacy"
      criticality: "low"
    staleness:
      enabled: true
      threshold: 1h  # Very lenient for legacy system
      behavior: "continue"  # Always process, just log staleness

  # Example 4: High-frequency API with strict staleness
  - name: "real-time-metrics"
    url: "https://realtime.example.com/metrics.json"
    format: "json"
    jq: ".metrics"
    event_type: "RealtimeMetrics"
    enabled: true
    attributes:
      frequency: "high"
      critical: "true"
    staleness:
      enabled: true
      threshold: 2m  # Very strict for real-time data
      behavior: "skip"  # Skip stale data to avoid confusion

  # Example 5: API without staleness detection
  - name: "static-config"
    url: "https://config.example.com/settings.json"
    format: "json"
    event_type: "ConfigData"
    enabled: true
    attributes:
      type: "configuration"
    staleness:
      enabled: false  # Config data doesn't need staleness checking

  # Example 6: Complex transformation with staleness
  - name: "complex-data"
    url: "https://api.example.com/complex.json"
    format: "json"
    jq: '.data | map(select(.active == true)) | map({id: .id, name: .name, value: .metrics.value, timestamp: .updated_at})'
    event_type: "ComplexData"
    enabled: true
    attributes:
      complexity: "high"
      transformation: "jq"
    staleness:
      enabled: true
      threshold: 10m
      behavior: "alert"
      check_url: "https://api.example.com/complex.json"

# Performance Benefits:
# - 10-20% improvement by skipping stale files
# - Reduced unnecessary network calls
# - Better resource utilization
# - Improved data quality through staleness detection

# Configuration Tips:
# 1. Use environment variables for sensitive data
# 2. Adjust thresholds based on data update frequency
# 3. Use "skip" behavior for performance optimization
# 4. Use "alert" behavior for monitoring purposes
# 5. Use "continue" behavior for data completeness
# 6. Monitor staleness metrics in New Relic dashboards