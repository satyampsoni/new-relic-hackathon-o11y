# Flex integration config for the demo
# - Polls Enhanced Flex Monitor every 10s
# - Focuses on staleness status (core of the demo) plus health, alerts, logs, system, and performance
integrations:
  - name: nri-flex
    interval: 10s
    config:
      name: enhanced-flex-monitor-demo
      global:
        base_url: http://localhost:8080
        headers:
          accept: application/json
        timeout: 10s

      apis:
        # Core demo: staleness status
        - name: staleness_metrics
          url: /api/staleness/status
          custom_attributes:
            service: enhanced-flex-monitor
            environment: demo
            metric_type: staleness
          # Normalized to typical fields exposed by the monitor
          jq: >
            .[] |
            {
              name: (.name // .api_name),
              is_stale: .is_stale,
              age_seconds: (.age_seconds // (.file_age_seconds // ((.file_age_minutes // 0) * 60))),
              threshold_seconds: (.threshold_seconds // ((.threshold_minutes // 0) * 60)),
              behavior: .behavior,
              last_modified: (.last_modified // .last_check)
            }

        # Health endpoint (works whether health is a flat object or per-API array)
        - name: api_health
          url: /api/health
          custom_attributes:
            service: enhanced-flex-monitor
            environment: demo
            metric_type: health_check
          jq: >
            try (
              .apis[] |
              {name: .name, status: .status, response_time_ms: .response_time_ms, last_check: .last_check}
            )
            catch {service_status: .status}

        # Alert summary (for behavior=alert or other rules)
        - name: alert_metrics
          url: /api/alerts/summary
          custom_attributes:
            service: enhanced-flex-monitor
            environment: demo
            metric_type: alerts
            component: alert_manager
          jq: >
            {
              total_alerts: .total_alerts,
              alerts_last_hour: .alerts_last_hour,
              critical_alerts: .critical_alerts,
              warning_alerts: .warning_alerts
            }

        # Optional: process application logs directly (adjust file path if needed)
        - name: log_processor
          file: /Users/satyampsoni/new-relic-o11y/new-relic-hackathon-o11y/test_data/server.log
          custom_attributes:
            service: enhanced-flex-monitor
            environment: demo
            data_type: application_logs
            log_source: server_log
          split: horizontal
          split_by: "\\n"
          regex_match: true
          jq: >
            select(length > 0)
            | try fromjson catch empty
            | select(. != null and .timestamp != null)
            | {
                timestamp: .timestamp,
                level: .level,
                message: .message,
                cpu: (.cpu // 0),
                source: (.source // "server"),
                api_name: (.api_name // "unknown")
              }

        # System stats from the monitor
        - name: system_metrics
          url: /api/system/stats
          custom_attributes:
            service: enhanced-flex-monitor
            environment: demo
            metric_type: system
            component: system_monitor
          jq: >
            {
              cpu_usage: .cpu_usage,
              memory_usage: .memory_usage,
              disk_usage: .disk_usage,
              goroutines: .goroutines,
              uptime_seconds: .uptime_seconds
            }

        # Aggregate performance metrics per API (if available)
        - name: performance_metrics
          url: /api/performance/summary
          custom_attributes:
            service: enhanced-flex-monitor
            environment: demo
            metric_type: performance
            component: performance_monitor
          jq: >
            try (
              .apis[] |
              {
                api_name: .name,
                avg_response_time_ms: .avg_response_time_ms,
                success_rate: .success_rate,
                total_requests: .total_requests,
                error_count: .error_count
              }
            ) catch empty